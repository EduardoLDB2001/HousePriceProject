# ets = ETS(value)
# neural = NNETAR(value)
)
statist = glance(fit2)
fc2 <- fit2 %>%
forecast(h = 12)
fc2 %>%
autoplot(empresa_tsibble)
fit2 <- empresa_tsibble %>%
fabletools::model(
# mean = MEAN(value),
# naive = NAIVE(value),
arima = ARIMA(value),
manual_arima = ARIMA(value ~ pdq(1,1,1))
# ets = ETS(value)
# neural = NNETAR(value)
)
statist = glance(fit2)
fc2 <- fit2 %>%
forecast(h = 12)
fc2 %>%
autoplot(empresa_tsibble)
fit2 <- empresa_tsibble %>%
fabletools::model(
# mean = MEAN(value),
# naive = NAIVE(value),
arima = ARIMA(value),
manual_arima = ARIMA(value ~ pdq(3,1,3))
# ets = ETS(value)
# neural = NNETAR(value)
)
statist = glance(fit2)
fc2 <- fit2 %>%
forecast(h = 12)
fc2 %>%
autoplot(empresa_tsibble)
fit2 <- empresa_tsibble %>%
fabletools::model(
# mean = MEAN(value),
# naive = NAIVE(value),
arima = ARIMA(value),
manual_arima = ARIMA(value ~ pdq(2,1,2))
# ets = ETS(value)
# neural = NNETAR(value)
)
statist = glance(fit2)
fc2 <- fit2 %>%
forecast(h = 12)
fc2 %>%
autoplot(empresa_tsibble)
fit2 <- empresa_tsibble %>%
fabletools::model(
# mean = MEAN(value),
# naive = NAIVE(value),
arima = ARIMA(value)
# manual_arima = ARIMA(value ~ pdq(2,1,2))
# ets = ETS(value)
# neural = NNETAR(value)
)
statist = glance(fit2)
fc2 <- fit2 %>%
forecast(h = 12)
fc2 %>%
autoplot(empresa_tsibble)
knitr::opts_chunk$set(echo = TRUE)
Zt = c(20, 22, 24, 25, 30)
table_1 <- data.frame(t = c(1, 2, 3, 4, 5),
Zt = c(20, 22, 24, 25, 30))
table_1 <- data.frame(t = c(1, 2, 3, 4, 5),
Zt = c(20, 22, 24, 25, 30),
diferenciada = c(NA, diff(Zt)))
View(table_1)
knitr::kable(table_1)
forecast::autoplot(table_1$Zt)
base::plot(table_1$Zt)
ggplot2::ggplot(data = table_1)+
aes(x = t, y = Zt)+
geom_line()
pacman::p_load(tidyverse)
pacman::p_load(tidyverse, ggplot2)
ggplot2::ggplot(data = table_1)+
aes(x = t, y = Zt)+
geom_line()
ggplot2::ggplot(data = table_1)+
aes(x = t, y = Zt)+
geom_line()+
theme_bw()
mean(table_1$Zt)
var(table_1$Zt)
var(table_1$Zt)
# Calcular a autocovariância para lag 2
resultado_autocov_lag2 = autocovariance(table_1$Zt, lag=2)
# Calcular a autocovariância para lag 2
resultado_autocov_lag2 = posterior::autocovariance(table_1$Zt, lag=2)
theta1 <- 0.5
n <- length(a)  # Número de observações (369)
theta1 <- 0.5
base::rm(list = ls())
grDevices::graphics.off()
setwd("~/Github/Projetos/IEEE/Projects/HousePriceProject/DBs")
library(pacman)
pacman::p_load(tidyverse,
stats,
DataExplorer,
GGally,
plotly,
shiny,
bslib,
shinydashboard,
shiny)
PATH = "~/Github/Projetos/IEEE/Projects/HousePriceProject/scripts/functions"
# Listar todos os arquivos .xlsx da pasta
files <- list.files(pattern = "\\.xlsx$")
# Criar uma lista para armazenar os dados de cada arquivo
data_list <- lapply(files, read_excel)
library(readxl)
# Listar todos os arquivos .xlsx da pasta
files <- list.files(pattern = "\\.xlsx$")
# Criar uma lista para armazenar os dados de cada arquivo
data_list <- lapply(files, read_excel)
View(data_list)
base::rm(list = ls())
grDevices::graphics.off()
setwd("~/Github/Projetos/IEEE/Projects/HousePriceProject/DBs")
# Listar todos os arquivos .xlsx da pasta
files <- list.files(pattern = "\\.xlsx$")
pacman::p_load(tidyverse,
readxl,
stats,
DataExplorer,
GGally,
plotly,
shiny,
bslib,
shinydashboard,
shiny)
# Criar uma lista para armazenar os dados de cada arquivo
data_list <- lapply(files, read_excel)
files <- list.files(pattern = "\\.xlsx$")
# Criar uma lista para armazenar os dados de cada arquivo
data_list <- lapply(files, read_excel)
# Combinar todos os data.frames em um único
combined_data <- bind_rows(data_list)
View(combined_data)
files <- list.files(pattern = "\\.xlsx$")
combined_data <- bind_rows(lapply(files, read_excel))
base::rm(list = ls())
combined_data = dplyr::bind_rows(lapply(list.files(pattern = "\\.xlsx$"), read_excel))
View(combined_data)
base::rm(list = ls())
grDevices::graphics.off()
setwd("~/Github/Projetos/IEEE/Projects/HousePriceProject/DBs")
library(pacman)
pacman::p_load(tidyverse,
readxl,
stats,
DataExplorer,
GGally,
plotly,
shiny,
bslib,
shinydashboard,
shiny)
PATH = "~/Github/Projetos/IEEE/Projects/HousePriceProject/scripts/functions"
base::lapply(list.files(PATH, pattern = "\\.R$", full.names = TRUE), source)
combined_data = dplyr::bind_rows(lapply(list.files(pattern = "\\.xlsx$"), read_excel))
View(combined_data)
venda <- combined_data %>%
filter(modo == "venda")
View(venda)
aluguel <- combined_data %>% filter(modo == "aluguel")
base::rm(list = ls())
grDevices::graphics.off()
setwd("~/Github/Projetos/IEEE/Projects/HousePriceProject/DBs")
library(pacman)
pacman::p_load(tidyverse,
readxl,
stats,
DataExplorer,
GGally,
plotly,
shiny,
bslib,
shinydashboard,
shiny)
PATH = "~/Github/Projetos/IEEE/Projects/HousePriceProject/scripts/functions"
base::lapply(list.files(PATH, pattern = "\\.R$", full.names = TRUE), source)
get_data_cleaned <- function(db){
data_raw = db %>%
janitor::clean_names() %>%
dplyr::mutate(property_type = case_when(
grepl("APARTAMENTO", type, ignore.case = TRUE) ~ "Apartamento",
grepl("CASA CONDOMINIO", type, ignore.case = TRUE) ~ "Casa Condominio",
grepl("CASA", type, ignore.case = TRUE) ~ "Casa", TRUE ~ "Outro")) %>%
dplyr::mutate(location = case_when(
grepl("BRASILIA", description, ignore.case = TRUE) ~ "Brasilia",
grepl("AGUAS CLARAS", description, ignore.case = TRUE) ~ "Aguas Claras",
grepl("JARDIM BOTANICO", description, ignore.case = TRUE) ~ "Jardim Botanico",
grepl("SOBRADINHO", description, ignore.case = TRUE) ~ "Sobradinho",
grepl("VICENTE PIRES", description, ignore.case = TRUE) ~ "Vicente Pires",
grepl("TAGUATINGA", description, ignore.case = TRUE) ~ "Taguatinga",
grepl("GUARA", description, ignore.case = TRUE) ~ "Guara",
grepl("SAMAMBAIA", description, ignore.case = TRUE) ~ "Samambaia",
grepl("CEILANDIA", description, ignore.case = TRUE) ~ "Ceilandia",
grepl("GAMA", description, ignore.case = TRUE) ~ "Gama",
grepl("RIACHO FUNDO", description, ignore.case = TRUE) ~ "Riacho Fundo",
grepl("VALPARAISO DE GOIAS", description, ignore.case = TRUE) ~ "Valparaiso de Goias",
grepl("NUCLEO BANDEIRANTE", description, ignore.case = TRUE) ~ "Nucleo Bandeirante",
grepl("SAO SEBASTIAO", description, ignore.case = TRUE) ~ "Sao Sebastiao",
grepl("RECANTO DAS EMAS", description, ignore.case = TRUE) ~ "Recanto das Emas",
grepl("CRUZEIRO", description, ignore.case = TRUE) ~ "Cruzeiro",
grepl("PARANOA", description, ignore.case = TRUE) ~ "Paranoa",
grepl("PLANALTINA", description, ignore.case = TRUE) ~ "Planaltina",
grepl("CIDADE OCIDENTAL", description, ignore.case = TRUE) ~ "Cidade Ocidental",
grepl("SANTA MARIA", description, ignore.case = TRUE) ~ "Santa Maria",
grepl("ALPHAVILLE", description, ignore.case = TRUE) ~ "Alphaville",
grepl("LUZIANIA", description, ignore.case = TRUE) ~ "Luziania",
grepl("SETOR INDUSTRIAL", description, ignore.case = TRUE) ~ "Setor Industrial",
grepl("AGUAS LINDAS DE GOIAS", description, ignore.case = TRUE) ~ "Aguas Lindas de Goias",
grepl("CANDANGOLANDIA", description, ignore.case = TRUE) ~ "Candangolandia",
grepl("BRAZLANDIA", description, ignore.case = TRUE) ~ "Brazlandia",
grepl("SANTO ANTONIO DO DESCOBERTO", description, ignore.case = TRUE) ~ "Santo Antonio do Descoberto",
grepl("FORMOSA", description, ignore.case = TRUE) ~ "Formosa",
grepl("PLANALTINA DE GOIAS", description, ignore.case = TRUE) ~ "Planaltina de Goias",
grepl("VILA ESTRUTURAL", description, ignore.case = TRUE) ~ "Vila Estrutural",
grepl("VARJAO", description, ignore.case = TRUE) ~ "Varjao",
TRUE ~ "Outro"))  %>%
dplyr::filter(property_type != "Outro")
data_cleaned <- data_raw %>%
dplyr::mutate(price = as.numeric(base::gsub("\\.", "", price)),
size = as.numeric(base::gsub("m²", "", size)),
bedrooms = as.integer(str_sub(bedrooms, start = 1, end = 1)),
car_spaces = as.integer(str_sub(car_spaces, start = 1, end = 1))) %>%
dplyr::filter(!is.na(price) &
price > 0 &
size > 0) %>%
dplyr::mutate(price_m2 = (price/size)) %>%
dplyr::relocate(property_type, .after = description) %>%
dplyr::relocate(location, .after = NULL) %>%
dplyr::select(-description, -type)
return(data_cleaned)
}
data_cleaned_venda = get_data_cleaned(db = vendas)
data_cleaned_venda = get_data_cleaned(db = venda)
combined_data = dplyr::bind_rows(lapply(list.files(pattern = "\\.xlsx$"), read_excel))
venda <- combined_data %>% filter(modo == "venda")
aluguel <- combined_data %>% filter(modo == "aluguel")
data_cleaned_venda = get_data_cleaned(db = venda)
data_cleaned_aluguel = get_data_cleaned(db = aluguel)
db = aluguel
View(db)
data_cleaned_venda = get_data_cleaned(db = venda)
data_cleaned_aluguel = get_data_cleaned(db = aluguel)
View(data_cleaned_aluguel)
data_cleaned = get_censorship(data = data_cleaned_aluguel, var = "price", pct = 0.05)
data_cleaned = get_censorship(data = data_cleaned_aluguel, var = "size", pct = 0.05)
data_cleaned = get_remove_outliers(data = data_cleaned)
get_plot_type(data = data_cleaned)
get_plot_region(data = data_cleaned, type = "Apartamento",
title_plot = "Preço do m² do Apartamento no DF")
ggplot2::ggplot(data_cleaned) +
aes(x = price_m2, fill = property_type) +
geom_histogram(bins = 30L) +
scale_fill_brewer(palette = "Blues", direction = 1) +
labs(y = "Contagem",
x = "Preço nominal do m²",
fill = "") + get_thema_plots()
base::rm(list = ls())
grDevices::graphics.off()
setwd("~/Github/Projetos/IEEE/Projects/HousePriceProject/DBs")
library(pacman)
pacman::p_load(tidyverse,
readxl,
stats,
DataExplorer,
GGally,
plotly,
shiny,
bslib,
shinydashboard,
shiny)
PATH = "~/Github/Projetos/IEEE/Projects/HousePriceProject/scripts/functions"
base::lapply(list.files(PATH, pattern = "\\.R$", full.names = TRUE), source)
combined_data = dplyr::bind_rows(lapply(list.files(pattern = "\\.xlsx$"), read_excel))
venda <- combined_data %>% filter(modo == "venda")
aluguel <- combined_data %>% filter(modo == "aluguel")
data_cleaned_venda = get_data_cleaned(db = venda)
data_cleaned_aluguel = get_data_cleaned(db = aluguel)
data_cleaned_aluguel = get_censorship(data = data_cleaned_aluguel, var = "price", pct = 0.05)
data_cleaned_aluguel = get_censorship(data = data_cleaned_aluguel, var = "size", pct = 0.05)
data_cleaned_venda = get_censorship(data = data_cleaned_venda, var = "price", pct = 0.05)
data_cleaned_venda = get_censorship(data = data_cleaned_venda, var = "size", pct = 0.05)
data_cleaned_aluguel = get_remove_outliers(data = data_cleaned_aluguel)
data_cleaned_venda = get_remove_outliers(data = data_cleaned_venda)
ggplot2::ggplot(data_cleaned_aluguel) +
aes(x = price_m2, fill = property_type) +
geom_histogram(bins = 30L) +
scale_fill_brewer(palette = "Blues", direction = 1) +
labs(y = "Contagem",
x = "Preço nominal do m²",
fill = "") + get_thema_plots()
y = "Contagem",
ggplot2::ggplot(data_cleaned_aluguel) +
aes(x = price_m2, fill = property_type) +
geom_histogram(bins = 30L) +
scale_fill_brewer(palette = "Blues", direction = 1) +
labs(title = "Aluguel: Preço do m²",
y = "Contagem",
x = "Preço nominal do m²",
fill = "") + get_thema_plots()
ggplot2::ggplot(data_cleaned_venda) +
aes(x = price_m2, fill = property_type) +
geom_histogram(bins = 30L) +
scale_fill_brewer(palette = "Blues", direction = 1) +
labs(title = "Venda: Preço do m²",
y = "Contagem",
x = "Preço nominal do m²",
fill = "") + get_thema_plots()
# Gráfico de aluguel
plot_aluguel <- ggplot(data_cleaned_aluguel) +
aes(x = price_m2, fill = property_type) +
geom_histogram(bins = 30L) +
scale_fill_brewer(palette = "Blues", direction = 1) +
labs(title = "Aluguel: Preço do m²",
y = "Contagem",
x = "Preço nominal do m²",
fill = "") + get_thema_plots()
# Gráfico de venda
plot_venda <- ggplot(data_cleaned_venda) +
aes(x = price_m2, fill = property_type) +
geom_histogram(bins = 30L) +
scale_fill_brewer(palette = "Blues", direction = 1) +
labs(title = "Venda: Preço do m²",
y = "Contagem",
x = "Preço nominal do m²",
fill = "") + get_thema_plots()
# Colocar um gráfico abaixo do outro
combined_plot <- plot_aluguel / plot_venda
# Mostrar os gráficos combinados
combined_plot
library(ggplot2)
library(patchwork)
# Gráfico de aluguel
plot_aluguel <- ggplot(data_cleaned_aluguel) +
aes(x = price_m2, fill = property_type) +
geom_histogram(bins = 30L) +
scale_fill_brewer(palette = "Blues", direction = 1) +
labs(title = "Aluguel: Preço do m²",
y = "Contagem",
x = "Preço nominal do m²",
fill = "") + get_thema_plots()
# Gráfico de venda
plot_venda <- ggplot(data_cleaned_venda) +
aes(x = price_m2, fill = property_type) +
geom_histogram(bins = 30L) +
scale_fill_brewer(palette = "Blues", direction = 1) +
labs(title = "Venda: Preço do m²",
y = "Contagem",
x = "Preço nominal do m²",
fill = "") + get_thema_plots()
# Colocar um gráfico abaixo do outro
combined_plot <- plot_aluguel / plot_venda
# Mostrar os gráficos combinados
combined_plot
View(aluguel)
aluguel <- combined_data %>% filter(modo == "aluguel")
combined_data = dplyr::bind_rows(lapply(list.files(pattern = "\\.xlsx$"), read_excel))
View(combined_data)
base::rm(list = ls())
grDevices::graphics.off()
setwd("~/Github/Projetos/IEEE/Projects/HousePriceProject/DBs")
library(pacman)
pacman::p_load(tidyverse,
readxl,
stats,
DataExplorer,
GGally,
plotly,
shiny,
bslib,
shinydashboard,
shiny)
PATH = "~/Github/Projetos/IEEE/Projects/HousePriceProject/scripts/functions"
base::lapply(list.files(PATH, pattern = "\\.R$", full.names = TRUE), source)
venda <- get_import_db(type = "venda")
combined_data <- dplyr::bind_rows(lapply(list.files(pattern = "\\.xlsx$"), read_excel))
View(combined_data)
type = "venda"
db = combined_data %>% dplyr::filter(modo == type)
db = combined_data %>% dplyr::filter(modo == "venda")
venda <- get_import_db(type = "venda")
venda <- get_import_db(type = "venda")
get_import_db <- function(type){
combined_data <- dplyr::bind_rows(lapply(list.files(pattern = "\\.xlsx$"), read_excel))
# Filtrar modo de interesse
db = combined_data %>% dplyr::filter(modo == as.character(type))
return(db)
}
venda <- get_import_db(type = "venda")
base::rm(list = ls())
grDevices::graphics.off()
setwd("~/Github/Projetos/IEEE/Projects/HousePriceProject/DBs")
library(pacman)
pacman::p_load(tidyverse,
readxl,
stats,
DataExplorer,
GGally,
plotly,
shiny,
bslib,
shinydashboard,
shiny)
PATH = "~/Github/Projetos/IEEE/Projects/HousePriceProject/scripts/functions"
base::lapply(list.files(PATH, pattern = "\\.R$", full.names = TRUE), source)
venda <- get_import_db(type = "venda")
aluguel <- get_import_db(type = "alguel")
db = combined_data %>% dplyr::filter(modo == as.character("venda"))
combined_data <- dplyr::bind_rows(lapply(list.files(pattern = "\\.xlsx$"), read_excel))
db = combined_data %>% dplyr::filter(modo == as.character("venda"))
get_import_db <- function(is_type){
combined_data <- dplyr::bind_rows(lapply(list.files(pattern = "\\.xlsx$"), read_excel))
# Filtrar modo de interesse
db = combined_data %>% dplyr::filter(modo == is_type)
return(db)
}
base::rm(list = ls())
grDevices::graphics.off()
setwd("~/Github/Projetos/IEEE/Projects/HousePriceProject/DBs")
library(pacman)
pacman::p_load(tidyverse,
readxl,
stats,
DataExplorer,
GGally,
plotly,
shiny,
bslib,
shinydashboard,
shiny)
PATH = "~/Github/Projetos/IEEE/Projects/HousePriceProject/scripts/functions"
base::lapply(list.files(PATH, pattern = "\\.R$", full.names = TRUE), source)
venda <- get_import_db(type = "venda")
venda <- get_import_db(is_type = "venda")
aluguel <- get_import_db(is_type = "alguel")
aluguel <- get_import_db(is_type = "aluguel")
data_raw = aluguel%>%
janitor::clean_names() %>%
dplyr::mutate(property_type = case_when(
grepl("APARTAMENTO", type, ignore.case = TRUE) ~ "Apartamento",
grepl("CASA CONDOMINIO", type, ignore.case = TRUE) ~ "Casa Condominio",
grepl("CASA", type, ignore.case = TRUE) ~ "Casa", TRUE ~ "Outro")) %>%
dplyr::mutate(location = case_when(
grepl("BRASILIA", description, ignore.case = TRUE) ~ "Brasilia",
grepl("AGUAS CLARAS", description, ignore.case = TRUE) ~ "Aguas Claras",
grepl("JARDIM BOTANICO", description, ignore.case = TRUE) ~ "Jardim Botanico",
grepl("SOBRADINHO", description, ignore.case = TRUE) ~ "Sobradinho",
grepl("VICENTE PIRES", description, ignore.case = TRUE) ~ "Vicente Pires",
grepl("TAGUATINGA", description, ignore.case = TRUE) ~ "Taguatinga",
grepl("GUARA", description, ignore.case = TRUE) ~ "Guara",
grepl("SAMAMBAIA", description, ignore.case = TRUE) ~ "Samambaia",
grepl("CEILANDIA", description, ignore.case = TRUE) ~ "Ceilandia",
grepl("GAMA", description, ignore.case = TRUE) ~ "Gama",
grepl("RIACHO FUNDO", description, ignore.case = TRUE) ~ "Riacho Fundo",
grepl("VALPARAISO DE GOIAS", description, ignore.case = TRUE) ~ "Valparaiso de Goias",
grepl("NUCLEO BANDEIRANTE", description, ignore.case = TRUE) ~ "Nucleo Bandeirante",
grepl("SAO SEBASTIAO", description, ignore.case = TRUE) ~ "Sao Sebastiao",
grepl("RECANTO DAS EMAS", description, ignore.case = TRUE) ~ "Recanto das Emas",
grepl("CRUZEIRO", description, ignore.case = TRUE) ~ "Cruzeiro",
grepl("PARANOA", description, ignore.case = TRUE) ~ "Paranoa",
grepl("PLANALTINA", description, ignore.case = TRUE) ~ "Planaltina",
grepl("CIDADE OCIDENTAL", description, ignore.case = TRUE) ~ "Cidade Ocidental",
grepl("SANTA MARIA", description, ignore.case = TRUE) ~ "Santa Maria",
grepl("ALPHAVILLE", description, ignore.case = TRUE) ~ "Alphaville",
grepl("LUZIANIA", description, ignore.case = TRUE) ~ "Luziania",
grepl("SETOR INDUSTRIAL", description, ignore.case = TRUE) ~ "Setor Industrial",
grepl("AGUAS LINDAS DE GOIAS", description, ignore.case = TRUE) ~ "Aguas Lindas de Goias",
grepl("CANDANGOLANDIA", description, ignore.case = TRUE) ~ "Candangolandia",
grepl("BRAZLANDIA", description, ignore.case = TRUE) ~ "Brazlandia",
grepl("SANTO ANTONIO DO DESCOBERTO", description, ignore.case = TRUE) ~ "Santo Antonio do Descoberto",
grepl("FORMOSA", description, ignore.case = TRUE) ~ "Formosa",
grepl("PLANALTINA DE GOIAS", description, ignore.case = TRUE) ~ "Planaltina de Goias",
grepl("VILA ESTRUTURAL", description, ignore.case = TRUE) ~ "Vila Estrutural",
grepl("VARJAO", description, ignore.case = TRUE) ~ "Varjao",
TRUE ~ "Outro"))
View(data_raw)
base::rm(list = ls())
grDevices::graphics.off()
setwd("~/Github/Projetos/IEEE/Projects/HousePriceProject/DBs")
library(pacman)
pacman::p_load(tidyverse,
readxl,
stats,
DataExplorer,
GGally,
plotly,
shiny,
bslib,
shinydashboard,
shiny)
PATH = "~/Github/Projetos/IEEE/Projects/HousePriceProject/scripts/functions"
base::lapply(list.files(PATH, pattern = "\\.R$", full.names = TRUE), source)
venda <- get_import_db(is_type = "venda")
aluguel <- get_import_db(is_type = "aluguel")
data_cleaned_venda = get_data_cleaned(db = venda)
data_cleaned_aluguel = get_data_cleaned(db = aluguel)
data_cleaned_aluguel = get_censorship(data = data_cleaned_aluguel, var = "price", pct = 0.05)
data_cleaned_aluguel = get_censorship(data = data_cleaned_aluguel, var = "size", pct = 0.05)
data_cleaned_venda = get_censorship(data = data_cleaned_venda, var = "price", pct = 0.05)
data_cleaned_venda = get_censorship(data = data_cleaned_venda, var = "size", pct = 0.05)
data_cleaned_aluguel = get_remove_outliers(data = data_cleaned_aluguel)
data_cleaned_venda = get_remove_outliers(data = data_cleaned_venda)
